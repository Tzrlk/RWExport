<#
RWExportGUI for RWExport-To-HTML.ps1
by EightBitz
   with code based on a sample from Sean Kearney
   which was generated by SAPIEN Technologies PrimalForms (Community Edition) v1.0.8.0

   Version 1.6
   2017-08-14, 9:00 PM CDT
#>

# https://blogs.technet.microsoft.com/heyscriptingguy/2011/07/24/create-a-simple-graphical-interface-for-a-powershell-script/

Add-Type @'
public class objGUICommand
{
    public string Script;
    public string Source;
    public string Destination;
    public int Sort;
    public bool Prefix;
    public bool Suffix;
    public bool Details;
    public bool Indent;
    public bool SeparateSnippets;
    public bool InlineStats;
    public int SimpleImageScale;
    public int SmartImageScale;
    public bool KeepStyles;
    public bool ExtractFiles;
    public string CSSFileName;
    public bool SplitTopics;
    public string Format;
    public bool Force;
    public string Log;
}
'@

Function BuildCommandLine ($Script,$Source,$Destination,$Sort,$Simple,$Smart,$CSSFile,$Prefix,$Suffix,$Details,$Indent,$Inline,$Keep,$Separate,$Split,$Extract,$Format,$Force,$Log,$LogName) {
   if (-not $Script.startswith('&("')) {$Script = "&(""$Script"")"}
   if (-not ($Source.Startswith("'")) -or ($Source.Startswith('"'))) {$Source = "'$Source'"}
   if (-not ($Destination.Startswith("'")) -or ($Destination.Startswith('"'))) {$Destination = "'$Destination'"}
   if (-not ($CSSFile.Startswith("'")) -or ($CSSFile.Startswith('"'))) {$CSSFile = "'$CSSFile'"}
   if (-not ($LogName.Startswith("'")) -or ($LogName.Startswith('"'))) {$LogName = "'$LogName'"}
   if (-not ($Format.Startswith("'")) -or ($Format.Startswith('"'))) {$Format = "'$Format'"}
   $CommandLine = "$Script -Source $Source -Destination $Destination -Sort $Sort -SimpleImageScale $Simple -SmartImageScale $Smart -CSSFileName $CSSFile -Format $Format"
   if ($Prefix) {$CommandLine = $CommandLine + " -Prefix"}
   if ($Suffix) {$CommandLine = $CommandLine + " -Suffix"}
   if ($Details) {$CommandLine = $CommandLine + " -Details"}
   if ($Indent) {$CommandLine = $CommandLine + " -Indent"}
   if ($Separate) {$CommandLine = $CommandLine + " -SeparateSnippets"}
   if ($Inline) {$CommandLine = $CommandLine + " -InlineStats"}
   if ($Keep) {$CommandLine = $CommandLine + " -KeepStyles"}
   if ($Split) {$CommandLine = $CommandLine + " -SplitTopics"}
   if ($Extract) {$CommandLine = $CommandLine + " -ExtractFiles"}
   if ($Force) {$CommandLine = $CommandLine + " -Force"}
   if ($Log) {$CommandLine = $CommandLine + " -Log $LogName"}
   Return $CommandLine
} # Function BuildCommandLine

Function LoadCommandLine ($CommandLine) {
   $Command = New-Object objGUICommand
   $Index1 = 0
   $Index2 = $CommandLine.IndexOf('.ps1")') + 6
   $Length = $Index2 - $Index1
   $Command.Script = $CommandLine.Substring($Index1,$Length)
   
   $Index1 = $CommandLine.IndexOf(" -Source") + 9
   $Index2 = $CommandLine.IndexOf(".rwoutput'") + 10
   $Length = $Index2 - $Index1
   $Command.Source = $CommandLine.Substring($Index1,$Length)

   $Index1 = $CommandLine.IndexOf(" -Destination") + 14

   if ($CommandLine.contains(".html'")) {$Index2 = $CommandLine.IndexOf(".html'") + 6}
   elseif ($CommandLine.contains(".htm'")) {$Index2 = $CommandLine.IndexOf(".htm'") + 5}
   elseif ($CommandLine.contains(".docx'")) {$Index2 = $CommandLine.IndexOf(".docx'") + 6}
   elseif ($CommandLine.contains(".doc'")) {$Index2 = $CommandLine.IndexOf(".doc'") + 5}
   else {$Index2 = $CommandLine.IndexOf("' -Sort") + 1}
   $Length = $Index2 - $Index1
   $Command.Destination = $CommandLine.Substring($Index1,$Length)

   if ($CommandLine.contains(" -Sort ")) {
      $Index1 = $CommandLine.IndexOf(" -Sort") + 7
      $Index2 = $CommandLine.IndexOf(" ",$Index1)
      $Length = $Index2 - $Index1
      $Command.Sort = $CommandLine.Substring($Index1,$Length)
   } # if ($CommandLine.contains(" -Sort "))

   if ($CommandLine.contains(" -SimpleImageScale")) {
      $Index1 = $CommandLine.IndexOf(" -SimpleImageScale ") + 19
      $Index2 = $CommandLine.IndexOf(" ",$Index1)
      $Length = $Index2 - $Index1
      $Command.SimpleImageScale = $CommandLine.Substring($Index1,$Length)
   } # if ($CommandLine.contains(" -SimpleImageScale "))

   if ($CommandLine.contains(" -SmartImageScale ")) {
      $Index1 = $CommandLine.IndexOf(" -SmartImageScale ") + 18
      $Index2 = $CommandLine.IndexOf(" ",$Index1)
      $Length = $Index2 - $Index1
      $Command.SmartImageScale = $CommandLine.Substring($Index1,$Length)
   } # if ($CommandLine.contains(" -SmartImageScale "))

   if ($CommandLine.Contains(" -CSSFileName")) {
      $Index1 = $CommandLine.IndexOf(" -CSSFileName") + 14
      $Index2 = $CommandLine.IndexOf(".css'") + 5
      $Length = $Index2 - $Index1
      $Command.CSSFileName = $CommandLine.Substring($Index1,$Length)
   } # if ($CommandLine.Contains(" -CSSFileName "))

   if ($CommandLine.contains(" -Format ")) {
      $Index1 = $CommandLine.IndexOf(" -Format") + 9
      $Index2 = $CommandLine.IndexOf(" ",$Index1)
      $Length = $Index2 - $Index1
      $Command.Format = $CommandLine.Substring($Index1,$Length)
      $Command.Format = $Command.Format.Replace("'","")
      $Command.Format = $Command.Format.Replace('"',"")
   } # if ($CommandLine.contains(" -Sort "))

   if ($CommandLine.Contains(" -Log")) {
      $Index1 = $CommandLine.IndexOf(" -Log") + 6
      $Index2 = $CommandLine.IndexOf(".log'") + 5
      $Length = $Index2 - $Index1
      $Command.Log = $CommandLine.Substring($Index1,$Length)
   } # if ($CommandLine.Contains(" -Log "))

   if ($CommandLine.Contains(" -Prefix")) {$Command.Prefix = $true} else {$Command.Prefix = $false}
   if ($CommandLine.Contains(" -Suffix")) {$Command.Suffix = $true} else {$Command.Suffix = $false}
   if ($CommandLine.Contains(" -Details")) {$Command.Details = $true} else {$Command.Details = $false}
   if ($CommandLine.Contains(" -Indent")) {$Command.Indent = $true} else {$Command.Indent = $false}
   if ($CommandLine.Contains(" -SeparateSnippets")) {$Command.SeparateSnippets = $true} else {$Command.SeparateSnippets = $false}
   if ($CommandLine.Contains(" -InlineStats")) {$Command.InlineStats = $true} else {$Command.InlineStats = $false}
   if ($CommandLine.Contains(" -KeepStyles")) {$Command.KeepStyles = $true} else {$Command.KeepStyles = $false}
   if ($CommandLine.Contains(" -ExtractFiles")) {$Command.ExtractFiles = $true} else {$Command.ExtractFiles = $false}
   if ($CommandLine.Contains(" -SplitTopics")) {$Command.SplitTopics = $true} else {$Command.SplitTopics = $false}
   if ($CommandLine.Contains(" -Force")) {$Command.Force = $true} else {$Command.Force = $false}
   
   Return $Command
} # Function BuildCommandLine

#Generated Form Function
function GenerateForm {
   ########################################################################
   # Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.8.0
   # Generated On: 7/3/2011 11:35 AM
   # Generated By: sean.kearney
   # 
   # Modified and adapted by EightBitz as a GUI for RWExport-To-HTML.ps1
   # Modified and Adapted On: 1/24/2017 5:00 AM CST
   ########################################################################

   #region Import the Assemblies
   [reflection.assembly]::loadwithpartialname(“System.Windows.Forms”) | Out-Null
   [reflection.assembly]::loadwithpartialname(“System.Drawing”) | Out-Null
   #endregion

   #region Generated Form Objects
   $RWExportForm = New-Object System.Windows.Forms.Form

   $ScriptButton = New-Object System.Windows.Forms.Button
   $ScriptText = New-Object System.Windows.Forms.TextBox

   $SourceButton = New-Object System.Windows.Forms.Button
   $SourceText = New-Object System.Windows.Forms.TextBox

   $DestinationButton = New-Object System.Windows.Forms.Button
   $DestinationText = New-Object System.Windows.Forms.TextBox

   $CSSButton = New-Object System.Windows.Forms.Button
   $CSSText = New-Object System.Windows.Forms.TextBox

   $LogCheck = New-Object System.Windows.Forms.CheckBox
   $LogButton = New-Object System.Windows.Forms.Button
   $LogText = New-Object System.Windows.Forms.TextBox

   $SortLabel = New-Object System.Windows.Forms.Label
   $SortComboBox = New-Object System.Windows.Forms.ComboBox
   
   $SimpleImgLabel = New-Object System.Windows.Forms.Label
   $SimpleImgText = New-Object System.Windows.Forms.TextBox

   $SmartImgLabel = New-Object System.Windows.Forms.Label
   $SmartImgText = New-Object System.Windows.Forms.TextBox

   $PrefixCheck = New-Object System.Windows.Forms.CheckBox
   $PrefixLabel = New-Object System.Windows.Forms.Label

   $SuffixCheck = New-Object System.Windows.Forms.CheckBox
   $SuffixLabel = New-Object System.Windows.Forms.Label

   $DetailsCheck = New-Object System.Windows.Forms.CheckBox
   $DetailsLabel = New-Object System.Windows.Forms.Label
   
   $IndentCheck = New-Object System.Windows.Forms.CheckBox
   $IndentLabel = New-Object System.Windows.Forms.Label
   
   $InlineStatsCheck = New-Object System.Windows.Forms.CheckBox
   $InlineStatsLabel = New-Object System.Windows.Forms.Label
   
   $KeepStylesCheck = New-Object System.Windows.Forms.CheckBox
   $KeepStylesLabel = New-Object System.Windows.Forms.Label

   $SeparateCheck = New-Object System.Windows.Forms.CheckBox
   $SeparateLabel = New-Object System.Windows.Forms.Label

   $SplitTopicsCheck = New-Object System.Windows.Forms.CheckBox
   $SplitTopicsLabel = New-Object System.Windows.Forms.Label

   $ExtractFilesCheck = New-Object System.Windows.Forms.CheckBox
   $ExtractFilesLabel = New-Object System.Windows.Forms.Label

   $ForceCheck = New-Object System.Windows.Forms.CheckBox
   $ForceLabel = New-Object System.Windows.Forms.Label

   $CommandLabel = New-Object System.Windows.Forms.Label
   $CommandText = New-Object System.Windows.Forms.TextBox

   $RunButton = New-Object System.Windows.Forms.Button
   $SaveButton = New-Object System.Windows.Forms.Button
   $LoadButton = New-Object System.Windows.Forms.Button
   $DefaultsButton = New-Object System.Windows.Forms.Button

   $FormatGroup = New-Object System.Windows.Forms.GroupBox
   
   $HTMLLabel = New-Object System.Windows.Forms.Label
   $HTMLButton = New-Object System.Windows.Forms.RadioButton

   $WordLabel = New-Object System.Windows.Forms.Label
   $WordButton = New-Object System.Windows.Forms.RadioButton

   $InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
   #endregion Generated Form Objects

   #———————————————-
   #Generated Event Script Blocks
   #———————————————-
   #Provide Custom Code for events specified in PrimalForms.

      $handler_ScriptButton_Click={
         $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
         $OpenFileDialog.initialDirectory = ".\"
         $OpenFileDialog.filter = “PowerShell Scripts (*.ps1)| *.ps1”
         [void]$OpenFileDialog.ShowDialog()
         $ScriptText.Text = $OpenFileDialog.filename.ToString()
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine   
      } # $handler_ScriptButton_Click

      $handler_TextBox_LostFocus={
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_ScriptText_LostFocus

      $handler_SourceButton_Click={
         $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
         $OpenFileDialog.initialDirectory = ".\"
         $OpenFileDialog.filter = “Realm Works Exports (*.RWOutput)| *.RWOutput”
         [void]$OpenFileDialog.ShowDialog()
         $SourceText.Text = $OpenFileDialog.filename.ToString()
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_SourceButton_Click

      $handler_DestinationButton_Click={
         if (($SplitTopicsCheck.Checked) -or ($ExtractFilesCheck.Checked)) {
            $SaveFolderDialog = New-Object System.Windows.Forms.FolderBrowserDialog
            $CurrentPath = Get-Item ".\"
            $SaveFolderDialog.SelectedPath = $CurrentPath.FullName
            [void]$SaveFolderDialog.ShowDialog()
            $DestinationText.Text = $SaveFolderDialog.selectedpath.ToString()
         } else {
            $SaveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
            $SaveFileDialog.initialDirectory = ".\"
            if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {
                $SaveFileDialog.filter = “HTML Files (*.htm; *.html)| *.htm; *.html”
            } elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {
                $SaveFileDialog.filter = “Word Files (*.doc; *.docx)| *.doc; *.docx"
                # $SaveFileDialog.filter = “Word Files (*.doc)| *.doc| Word Files (*.docx)|*.docx”
            }
            [void]$SaveFileDialog.ShowDialog()
            $DestinationText.Text = $SaveFileDialog.filename.ToString()
         }

         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_DestinationButton_Click

      $handler_CSSButton_Click={
         $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
         $OpenFileDialog.initialDirectory = ".\"
         $OpenFileDialog.filter = “Cascading Style Sheets (*.css)| *.css”
         [void]$OpenFileDialog.ShowDialog()
         $CSSFileName = $OpenFileDialog.filename
         $SplitCSS = $CSSFileName.Split("\")
         $CSSText.Text = $SplitCSS[$SplitCSS.Count-1]
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_CSSButton_Click

      $handler_CSSText_LostFocus={
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_CSSText_LostFocus

      $handler_LogButton_Click={
         $SaveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
         $SaveFileDialog.initialDirectory = ".\"
         $SaveFileDialog.filter = “Log Files (*.log)| *.log”
         # $OpenFileDialog.showhelp = $true
         [void]$SaveFileDialog.ShowDialog()
         $LogText.Text = $SaveFileDialog.filename.ToString()
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_LogButton_Click

      $SortComboBox_SelectedIndexChanged={
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $SortComboBox_SelectedIndexChanged

      $handler_CheckBox_CheckStateChanged={
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_CheckBox_CheckStateChanged

      $handler_Split_ExportCheck_CheckStateChanged={
         if (($SplitTopicsCheck.Checked) -or ($ExtractFilesCheck.Checked)) {
            $DestinationButton.Text = "Destination Path"
         } else {
            $DestinationButton.Text = "Destination File"
         } # if ($SplitTopicsCheck.Checked)
         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_CheckBox_CheckStateChanged

      $handler_LogCheck_CheckStateChanged={
         if ($LogCheck.Checked) {
            $LogButton.Enabled = $true
            $LogText.Enabled = $true
         } else {
            $LogButton.Enabled = $false
            $LogText.Enabled = $false
         } # if ($LogCheck.Checked)

         $SortMethod = $SortComboBox.SelectedIndex + 1

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_LogCheck_CheckStateChanged

      $handler_RWEXportForm_Shown={
         $SortMethod = $SortComboBox.SelectedIndex + 1
         if (Test-Path ".\Defaults.ps1") {
            [array]$ScriptFile = Get-Content ".\Defaults.ps1"
            $LoadedCommand = LoadCommandLine $ScriptFile[0]
            $ScriptText.Text = $LoadedCommand.Script
            $SourceText.Text = $LoadedCommand.Source
            $DestinationText.Text = $LoadedCommand.Destination
            $SortComboBox.SelectedIndex = $LoadedCommand.Sort - 1
            $SortMethod = $LoadedCommand.Sort
            $SimpleImgText.Text = $LoadedCommand.SimpleImageScale
            $SmartImgText.Text = $LoadedCommand.SmartImageScale
            $CSSText.Text = $LoadedCommand.CSSFileName
            if ($LoadedCommand.Prefix) {$PrefixCheck.Checked = $true} else {$PrefixCheck.Checked = $false}
            if ($LoadedCommand.Suffix) {$SuffixCheck.Checked = $true} else {$SuffixCheck.Checked = $false}
            if ($LoadedCommand.Details) {$DetailsCheck.Checked = $true} else {$DetailsCheck.Checked = $false}
            if ($LoadedCommand.Indent) {$IndentCheck.Checked = $true} else {$IndentCheck.Checked = $false}
            if ($LoadedCommand.InlineStats) {$InlineStatsCheck.Checked = $true} else {$InlineStatsCheck.Checked = $false}
            if ($LoadedCommand.KeepStyles) {$KeepStylesCheck.Checked = $true} else {$KeepStylesCheck.Checked = $false}
            if ($LoadedCommand.SeparateSnippets) {$SeparateCheck.Checked = $true} else {$SeparateCheck.Checked = $false}
            if ($LoadedCommand.SplitTopics) {$SplitTopicsCheck.Checked = $true} else {$SplitTopicsCheck.Checked = $false}
            if ($LoadedCommand.ExtractFiles) {$ExtractFilesCheck.Checked = $true} else {$ExtractFilesCheck.Checked = $false}
            if ($LoadedCommand.Force) {$ForceCheck.Checked = $true} else {$ForceCheck.Checked = $false}
            Switch ($LoadedCommand.Format) {
               "Word" {$HTMLButton.Checked = $false;$WordButton.Checked = $true}
               "HTML" {$HTMLButton.Checked = $true;$WordButton.Checked = $false}
            } # Switch ($LoadedCommand.Format)
            if ($LoadedCommand.Log) {$LogCheck.Checked = $true;$LogText.Text = $LoadedCommand.Log} else {$LogCheck.Checked = $false;$LogText.Text = ""}
         } # if (Test-Path ".\Default.ps1")

         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}

         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      }

      $handler_RunButton_Click={

         $SortMethod = $SortComboBox.SelectedIndex + 1
         $RunButton.Enabled = $false

         if ($ForceCheck.Checked) {
            Invoke-Expression $CommandText.Text
         } else {
            if (Test-Path ".\ValidateInput.ps1") {
               if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
               elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}
               $ValidInput = &(".\ValidateInput") $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod ($SimpleImgText.Text).ToInt32($null) ($SmartImgText.Text).ToInt32($null) $ExtractFilesCheck.Checked $CSSText.Text $SplitTopicsCheck.Checked $Format $LogCheck.Checked $LogText.Text "GUI"
   
               If ($ValidInput) {
                  Write-Host "Input validated. Running Script."
                  if ($CommandText.Text.contains(" -Force")) {$CommandLine = $CommandText.Text} else {$CommandLine = $CommandText.Text + " -Force"}
                  Invoke-Expression $CommandLine
               } else {
                  $MsgTitle = "Invalid Input"
                  $MsgText = "Please check the settings and try again."
                  $Msg = New-Object -ComObject Wscript.Shell
                  $OKMsg = $Msg.Popup($MsgText,0,$MsgTitle,0)
               } # If ($ValidInput)
            } else {
               $MsgTitle ="Can't Validate"
               $MsgText = "Cannot find input validation script. Proceed anyway?"
               $Msg = New-Object -ComObject Wscript.Shell
               $YesOrNo = $Msg.Popup($MsgText,0,$MsgTitle,4)

               Switch ($YesOrNo) {
                  6 {
                     if ($CommandText.Text.contains(" -Force")) {$CommandLine = $CommandText.Text} else {$CommandLine = $CommandText.Text + " -Force"}
                     Invoke-Expression $CommandLine
                  }
                  7 {
                     $MsgTitle = "User Abort"
                     $MsgText = "Exiting script."
                     $Msg = New-Object -ComObject Wscript.Shell
                     $OKMsg = $Msg.Popup($MsgText,0,$MsgTitle,0)
                  }
                } # Switch
            }
         } # if ($ForceCheck.Checked)

         $RunButton.Enabled = $true
      } # $handler_RunButton_Click

      $handler_SaveButton_Click={
         $SaveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
         $SaveFileDialog.initialDirectory = ".\"
         $SaveFileDialog.filter = “PowerShell Files (*.ps1)| *.ps1”
         # $OpenFileDialog.showhelp = $true
         [void]$SaveFileDialog.ShowDialog()
         $CommandText.Text | Out-File $SaveFileDialog.filename
      } # $handler_SaveButton_Click

      $handler_LoadButton_Click={
         $LoadedCommand = New-Object objGUICommand
         $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
         $OpenFileDialog.initialDirectory = ".\"
         $OpenFileDialog.filter = “PowerShell Scripts (*.ps1)| *.ps1”
         [void]$OpenFileDialog.ShowDialog()

         [array]$ScriptFile = Get-Content $OpenFileDialog.filename
         $LoadedCommand = LoadCommandLine $ScriptFile[0]
         $ScriptText.Text = $LoadedCommand.Script
         $SourceText.Text = $LoadedCommand.Source
         $DestinationText.Text = $LoadedCommand.Destination
         $SortComboBox.SelectedIndex = $LoadedCommand.Sort - 1
         $SortMethod = $LoadedCommand.Sort
         $SimpleImgText.Text = $LoadedCommand.SimpleImageScale
         $SmartImgText.Text = $LoadedCommand.SmartImageScale
         $CSSText.Text = $LoadedCommand.CSSFileName
         if ($LoadedCommand.Prefix) {$PrefixCheck.Checked = $true} else {$PrefixCheck.Checked = $false}
         if ($LoadedCommand.Suffix) {$SuffixCheck.Checked = $true} else {$SuffixCheck.Checked = $false}
         if ($LoadedCommand.Details) {$DetailsCheck.Checked = $true} else {$DetailsCheck.Checked = $false}
         if ($LoadedCommand.Indent) {$IndentCheck.Checked = $true} else {$IndentCheck.Checked = $false}
         if ($LoadedCommand.InlineStats) {$InlineStatsCheck.Checked = $true} else {$InlineStatsCheck.Checked = $false}
         if ($LoadedCommand.KeepStyles) {$KeepStylesCheck.Checked = $true} else {$KeepStylesCheck.Checked = $false}
         if ($LoadedCommand.SeparateSnippets) {$SeparateCheck.Checked = $true} else {$SeparateCheck.Checked = $false}
         if ($LoadedCommand.SplitTopics) {$SplitTopicsCheck.Checked = $true} else {$SplitTopicsCheck.Checked = $false}
         if ($LoadedCommand.ExtractFiles) {$ExtractFilesCheck.Checked = $true} else {$ExtractFilesCheck.Checked = $false}
         if ($LoadedCommand.Force) {$ForceCheck.Checked = $true} else {$ForceCheck.Checked = $false}
         Switch ($LoadedCommand.Format) {
            "Word" {$HTMLButton.Checked = $false;$WordButton.Checked = $true}
            "HTML" {$HTMLButton.Checked = $true;$WordButton.Checked = $false}
         } # Switch ($LoadedCommand.Format)
         if ($LoadedCommand.Log) {$LogCheck.Checked = $true;$LogText.Text = $LoadedCommand.Log} else {$LogCheck.Checked = $false;$LogText.Text = ""}
         
         if (($HTMLButton.Checked -eq $true) -and ($WordButton.Checked -eq $false)) {$Format = "HTML"}
         elseif (($HTMLButton.Checked -eq $false) -and ($WordButton.Checked -eq $true)) {$Format = "Word"}
         
         $CommandLine = BuildCommandLine $ScriptText.Text $SourceText.Text $DestinationText.Text $SortMethod $SimpleImgText.Text $SmartImgText.Text $CSSText.Text $PrefixCheck.Checked $SuffixCheck.Checked $DetailsCheck.checked $IndentCheck.Checked $InlineStatsCheck.Checked $KeepStylesCheck.Checked $SeparateCheck.Checked $SplitTopicsCheck.Checked $ExtractFilesCheck.Checked $Format $ForceCheck.Checked $LogCheck.Checked $LogText.Text
         $CommandText.Text = $CommandLine
      } # $handler_LoadButton_Click

      $handler_DefaultsButton_Click={
         $CommandText.Text | Out-File ".\Defaults.ps1"
      } # $handler_DefaultsButton_Click

      $OnLoadForm_StateCorrection={
         #Correct the initial state of the form to prevent the .Net maximized form issue
         $RWExportForm.WindowState = $InitialFormWindowState
      } # $OnLoadForm_StateCorrection

   #———————————————-
   #region Generated Form Code
   $RWExportForm.Text = “RWExport-To-HTML”
   $RWExportForm.Name = “RWExport-To-HTML”
   $RWExportForm.DataBindings.DefaultDataSourceUpdateMode = 0
   $System_Drawing_Size = New-Object System.Drawing.Size
   $System_Drawing_Size.Width = 650
   $System_Drawing_Size.Height = 525
   $RWExportForm.ClientSize = $System_Drawing_Size
   $RWExportForm.Add_Shown($handler_RWEXportForm_Shown)

   $x = 15
   $y = 15
   $xpadding = 10
   $ypadding = 5
   $Tab = 0

   $ScriptButton.TabIndex = $Tab
   $relativex = $x
   $relativey = $y
   $ScriptButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $ScriptButton.Name = “ScriptButton”
   $Width = 100
   $Height = 25
   $ScriptButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $ScriptButton.Text = “Script File”
   $ScriptButton.add_Click($handler_ScriptButton_Click)

   $Tab = $Tab + 1
   $ScriptText.TabIndex = $Tab 
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $ScriptText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $ScriptText.Name = “ScriptText”
   $Width = 510
   $Height = 25
   $ScriptText.Size = New-Object System.Drawing.Size($Width,$Height)
   $ScriptText.Text = “.\RWExport-To-HTML.ps1”
   $ScriptText.add_LostFocus($handler_TextBox_LostFocus)

   $Tab = $Tab + 1
   $SourceButton.TabIndex = $Tab
   $relativex = $x
   $relativey = $relativey + $height + $ypadding
   $SourceButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SourceButton.Name = “SourceButton”
   $Width = 100
   $Height = 25
   $SourceButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $SourceButton.Text = “Source File”
   $SourceButton.add_Click($handler_SourceButton_Click)

   $Tab = $Tab + 1
   $SourceText.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $SourceText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SourceText.Name = “SourceText”
   $Width = 510
   $Height = 25
   $SourceText.Size = New-Object System.Drawing.Size($Width,$Height)
   $SourceText.Text = “.\MyRealm.rwoutput”
   $SourceText.add_LostFocus($handler_TextBox_LostFocus)

   ####### Format Group #########
   <##> $Tab = $Tab + 1
   <##> $FormatGroup.TabIndex = $Tab
   <##> $relativex = $x
   <##> $relativey = $relativey + $height + $padding + 5
   <##> $yoffset = $relativey + 5
   <##> $FormatGroup.Location = New-Object System.Drawing.Size($relativex,$relativey)
   <##> $FormatGroup.Name = “FormatGroup”
   <##> $Width = 620
   <##> $Height = 45
   <##> $FormatGroup.Size = New-Object System.Drawing.Size($Width,$Height)
   <##> $FormatGroup.Text = “Output Format”
   <##>
   <##> $Tab = $Tab + 1
   <##> $HTMLButton.TabIndex = $Tab
   <##> $relativeGroupx = $x
   <##> $relativeGroupy = $y +5
   <##> $HTMLButton.Location = New-Object System.Drawing.Size($relativeGroupx,$relativeGroupy)
   <##> $HTMLButton.Name = “HTMLButton”
   <##> $FGWidth = 15
   <##> $FGHeight = 15
   <##> $HTMLButton.Size = New-Object System.Drawing.Size($FGWidth,$FGHeight)
   <##> $HTMLButton.Checked = $true
   <##> $HTMLButton.Add_Click($handler_CheckBox_CheckStateChanged)
   <##>
   <##> $Tab = $Tab + 1
   <##> $HTMLLabel.TabIndex = $Tab
   <##> $relativeGroupx = $relativeGroupx + $FGWidth + $padding
   <##> $relativeGroupy = $relativeGroupy
   <##> $FGyoffset = $relativey + 5
   <##> $HTMLLabel.Location = New-Object System.Drawing.Size($relativeGroupx,$relativeGroupy)
   <##> $HTMLLabel.Name = “HTMLLabel”
   <##> $FGWidth = 240
   <##> $FGHeight = 15
   <##> $HTMLLabel.Size = New-Object System.Drawing.Size($FGWidth,$FGHeight)
   <##> $HTMLLabel.Text = “HTML with CSS formatting and linked topics.”
   <##> 
   <##> $Tab = $Tab + 1
   <##> $WordButton.TabIndex = $Tab
   <##> $relativeGroupx = $relativeGroupx + $FGWidth + $padding
   <##> $relativeGroupy = $relativeGroupy
   <##> $WordButton.Location = New-Object System.Drawing.Size($relativeGroupx,$relativeGroupy)
   <##> $WordButton.Name = “WordButton”
   <##> $FGWidth = 15
   <##> $FGHeight = 15
   <##> $WordButton.Size = New-Object System.Drawing.Size($FGWidth,$FGHeight)
   <##> $WordButton.Checked = $false
   <##> $WordButton.Add_Click($handler_CheckBox_CheckStateChanged)
   <##>
   <##> $Tab = $Tab + 1
   <##> $WordLabel.TabIndex = $Tab
   <##> $relativeGroupx = $relativeGroupx + $FGWidth + $padding
   <##> $relativeGroupy = $relativeGroupy
   <##> $FGyoffset = $relativey + 5
   <##> $WordLabel.Location = New-Object System.Drawing.Size($relativeGroupx,$relativeGroupy)
   <##> $WordLabel.Name = “WordLabel”
   <##> $FGWidth = 350
   <##> $FGHeight = 15
   <##> $WordLabel.Size = New-Object System.Drawing.Size($FGWidth,$FGHeight)
   <##> $WordLabel.Text = “Word with organized topic headings and a table of contents.”
   ################ End Format Group #########


   $Tab = $Tab + 1
   $DestinationButton.TabIndex = $Tab
   $relativex = $x
   $relativey = $relativey + $height + $ypadding
   $DestinationButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $DestinationButton.Name = “DestinationButton”
   $Width = 100
   $Height = 25
   $DestinationButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $DestinationButton.Text = “Destination File”
   $DestinationButton.add_Click($handler_DestinationButton_Click)

   $Tab = $Tab + 1
   $DestinationText.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $DestinationText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $DestinationText.Name = “DestinationText”
   $Width = 510
   $Height = 25
   $DestinationText.Size = New-Object System.Drawing.Size($Width,$Height)
   $DestinationText.Text = “.\MyRealm.html”
   $DestinationText.add_LostFocus($handler_TextBox_LostFocus)

   $Tab = $Tab + 1
   $CSSButton.TabIndex = $Tab
   $relativex = $x
   $relativey = $relativey + $height + $ypadding
   $CSSButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $CSSButton.Name = “CSSButton”
   $Width = 100
   $Height = 25
   $CSSButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $CSSButton.Text = “CSS File”
   $CSSButton.add_Click($handler_CSSButton_Click)

   $Tab = $Tab + 1
   $CSSText.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $CSSText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $CSSText.Name = “CSSText”
   $Width = 510
   $Height = 25
   $CSSText.Size = New-Object System.Drawing.Size($Width,$Height)
   $CSSText.Text = “RWExport_091b_1.6.css”
   $CSSText.add_LostFocus($handler_TextBox_LostFocus)

   $Tab = $Tab + 1
   $LogCheck.TabIndex = $Tab
   $relativex = $x
   $relativey = $relativey + $height + $ypadding
   $LogCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $LogCheck.Name = “LogCheck”
   $Width = 15
   $Height = 25
   $LogCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $LogCheck.Checked = $false
   $LogCheck.Add_CheckStateChanged($handler_LogCheck_CheckStateChanged)

   $Tab = $Tab + 1
   $LogButton.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $LogButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $LogButton.Name = “LogButton”
   $Width = 75
   $Height = 25
   $LogButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $LogButton.Text = “Log File”
   $LogButton.add_Click($handler_LogButton_Click)
   $LogButton.Enabled = $false

   $Tab = $Tab + 1
   $LogText.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $LogText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $LogText.Name = “LogText”
   $Width = 510
   $Height = 25
   $LogText.Size = New-Object System.Drawing.Size($Width,$Height)
   $LogText.Text = “.\RWExport.log”
   $LogText.add_LostFocus($handler_TextBox_LostFocus)
   $LogText.Enabled = $false

   $Tab = $Tab + 1
   $SortLabel.TabIndex = $Tab
   $relativex = $x + 20
   $relativey = $relativey + $Height + $ypadding
   $yoffset = $relativey + 5
   $SortLabel.Location = New-Object System.Drawing.Size($relativex,$yoffset)
   $SortLabel.Name = “SortLabel”
   $Width = 80
   $Height = 25
   $SortLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $SortLabel.Text = “Sort Topics By”

   $Tab = $Tab + 1
   $SortComboBox.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $SortComboBox.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SortComboBox.Name = “SortComboBox”
   $Width = 150
   $Height = 15
   $SortComboBox.Size = New-Object System.Drawing.Size($Width,$Height)
   $SortComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList
   [void] $SortComboBox.Items.Add("1: Name")
   [void] $SortComboBox.Items.Add("2: Prefix, Name")
   [void] $SortComboBox.Items.Add("3: Category, Name")
   [void] $SortComboBox.Items.Add("4: Category,Prefix,Name")
   $SortComboBox.SelectedIndex = 1
   $SortComboBox.add_SelectedIndexChanged($SortComboBox_SelectedIndexChanged)

   $Tab = $Tab + 1
   $SimpleImgLabel.TabIndex = $Tab
   $relativex = $relativex + $width + $xpadding + 10
   $relativey = $relativey
   $yoffset = $relativey + 5
   $SimpleImgLabel.Location = New-Object System.Drawing.Size($relativex,$yoffset)
   $SimpleImgLabel.Name = “SimpleImgLabel”
   $Width = 105
   $Height = 15
   $SimpleImgLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $SimpleImgLabel.Text = “Scale Pictures by %”

   $Tab = $Tab + 1
   $SimpleImgText.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $SimpleImgText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SimpleImgText.Name = “SimpleImgText”
   $Width = 30
   $Height = 15
   $SimpleImgText.Size = New-Object System.Drawing.Size($Width,$Height)
   $SimpleImgText.Text = “0”
   $SimpleImgText.add_LostFocus($handler_TextBox_LostFocus)

   $Tab = $Tab + 1
   $SmartImgLabel.TabIndex = $Tab
   $relativex = $relativex + $width + $xpadding + 10
   $relativey = $relativey
   $yoffset = $relativey + 5
   $SmartImgLabel.Location = New-Object System.Drawing.Size($relativex,$yoffset)
   $SmartImgLabel.Name = “SmartImgLabel”
   $Width = 135
   $Height = 15
   $SmartImgLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $SmartImgLabel.Text = “Scale Smart Images by %”

   $Tab = $Tab + 1
   $SmartImgText.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $SmartImgText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SmartImgText.Name = “SmartImgText”
   $Width = 30
   $Height = 15
   $SmartImgText.Size = New-Object System.Drawing.Size($Width,$Height)
   $SmartImgText.Text = “0”
   $SmartImgText.add_LostFocus($handler_TextBox_LostFocus)

   $x1 = $x + 25
   $x2 = $x1 + 175
   $x3 = $x2 + 175
   $y2padding = 20

   $Tab = $Tab + 1
   $PrefixCheck.TabIndex = $Tab
   $relativex = $x1
   $relativey = $relativey + $Height + $y2padding
   $PrefixCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $LogCheck.Name = “PrefixCheck”
   $Width = 15
   $Height = 15
   $PrefixCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $PrefixCheck.Checked = $true
   $PrefixCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $PrefixLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $PrefixLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $PrefixLabel.Name = “PrefixLabel”
   $Width = 125
   $Height = 15
   $PrefixLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $PrefixLabel.Text = “Include Topic Prefixes”

   $Tab = $Tab + 1
   $SuffixCheck.TabIndex = $Tab
   $relativex = $x2
   $relativey = $relativey
   $SuffixCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SuffixCheck.Name = “SuffixCheck”
   $Width = 15
   $Height = 15
   $SuffixCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $SuffixCheck.Checked = $true
   $SuffixCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $SuffixLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $SuffixLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SuffixLabel.Name = “SuffixLabel”
   $Width = 120
   $Height = 15
   $SuffixLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $SuffixLabel.Text = “Include Topic Suffixes”

   $Tab = $Tab + 1
   $DetailsCheck.TabIndex = $Tab
   $relativex = $x3
   $relativey = $relativey
   $DetailsCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $DetailsCheck.Name = “DetailsCheck”
   $Width = 15
   $Height = 15
   $DetailsCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $DetailsCheck.Checked = $true
   $DetailsCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $DetailsLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $DetailsLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $DetailsLabel.Name = “DetailsLabel”
   $Width = 120
   $Height = 15
   $DetailsLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $DetailsLabel.Text = “Include Topic Details”

   $Tab = $Tab + 1
   $IndentCheck.TabIndex = $Tab
   $relativex = $x1
   $relativey = $relativey + $height
   $IndentCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $IndentCheck.Name = “IndentCheck”
   $Width = 15
   $Height = 15
   $IndentCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $IndentCheck.Checked = $true
   $IndentCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $IndentLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $IndentLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $IndentLabel.Name = “IndentLabel”
   $Width = 250
   $Height = 15
   $IndentLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $IndentLabel.Text = “Indent Contained Topics and Subsections”

   $Tab = $Tab + 1
   $InlineStatsCheck.TabIndex = $Tab
   $relativex = $x3
   $relativey = $relativey
   $InlineStatsCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $InlineStatsCheck.Name = “InlineStatsCheck”
   $Width = 15
   $Height = 15
   $InlineStatsCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $InlineStatsCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $InlineStatsLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $InlineStatsLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $InlineStatsLabel.Name = “InlineStatsLabel”
   $Width = 250
   $Height = 15
   $InlineStatsLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $InlineStatsLabel.Text = “Display Full Stat Blocks Inline”

   $Tab = $Tab + 1
   $KeepStylesCheck.TabIndex = $Tab
   $relativex = $x1
   $relativey = $relativey + $height
   $KeepStylesCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $KeepStylesCheck.Name = “KeepStylesCheck”
   $Width = 15
   $Height = 15
   $KeepStylesCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $KeepStylesCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $KeepStylesLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $KeepStylesLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $KeepStylesLabel.Name = “KeepStylesLabel”
   $Width = 250
   $Height = 15
   $KeepStylesLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $KeepStylesLabel.Text = “Preserve  Original Text Formatting”

   $Tab = $Tab + 1
   $SeparateCheck.TabIndex = $Tab
   $relativex = $x3
   $relativey = $relativey
   $SeparateCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SeparateCheck.Name = “SeparateCheck”
   $Width = 15
   $Height = 15
   $SeparateCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $SeparateCheck.Checked = $true
   $SeparateCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $SeparateLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $SeparateLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SeparateLabel.Name = “SeparateLabel”
   $Width = 250
   $Height = 15
   $SeparateLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $SeparateLabel.Text = “Insert a Divider Line Between Snippets”

   $Tab = $Tab + 1
   $SplitTopicsCheck.TabIndex = $Tab
   $relativex = $x1
   $relativey = $relativey + $height
   $SplitTopicsCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SplitTopicsCheck.Name = “SplitTopicsCheck”
   $Width = 15
   $Height = 15
   $SplitTopicsCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $SplitTopicsCheck.Add_CheckStateChanged($handler_Split_ExportCheck_CheckStateChanged)

   $Tab = $Tab + 1
   $SplitTopicsLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $SplitTopicsLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SplitTopicsLabel.Name = “SplitTopicsLabel”
   $Width = 250
   $Height = 15
   $SplitTopicsLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $SplitTopicsLabel.Text = “Save each topic as a separate file.”

   $Tab = $Tab + 1
   $ExtractFilesCheck.TabIndex = $Tab
   $relativex = $x3
   $relativey = $relativey
   $ExtractFilesCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $ExtractFilesCheck.Name = “ExtractFilesCheck”
   $Width = 15
   $Height = 15
   $ExtractFilesCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $ExtractFilesCheck.Add_CheckStateChanged($handler_Split_ExportCheck_CheckStateChanged)

   $Tab = $Tab + 1
   $ExtractFilesLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $ExtractFilesLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $ExtractFilesLabel.Name = “ExtractFilesLabel”
   $Width = 250
   $Height = 15
   $ExtractFilesLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $ExtractFilesLabel.Text = “Extract embedded files.”

   $Tab = $Tab + 1
   $ForceCheck.TabIndex = $Tab
   $relativex = $x1
   $relativey = $relativey + $height
   $ForceCheck.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $ForceCheck.Name = “ForceCheck”
   $Width = 15
   $Height = 15
   $ForceCheck.Size = New-Object System.Drawing.Size($Width,$Height)
   $ForceCheck.Add_CheckStateChanged($handler_CheckBox_CheckStateChanged)

   $Tab = $Tab + 1
   $ForceLabel.TabIndex = $Tab
   $relativex = $relativex + $Width + $xpadding
   $relativey = $relativey
   $yoffset = $relativey + 5
   $ForceLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $ForceLabel.Name = “ForceLabel”
   $Width = 250
   $Height = 15
   $ForceLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $ForceLabel.Text = “Bypass input validation.”
   
   $Tab = $Tab + 1
   $CommandLabel.TabIndex = $Tab
   $relativex = $x
   $relativey = $relativey + $height + $ypadding
   $CommandLabel.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $CommandLabel.Name = “CommandLabel”
   $Width = 100
   $Height = 15
   $CommandLabel.Size = New-Object System.Drawing.Size($Width,$Height)
   $CommandLabel.Text = “CommandLine”
   $CommandLabel.add_Click($handler_ScriptButton_Click)

   $Tab = $Tab + 1
   $CommandText.TabIndex = $Tab 
   $relativex = $x
   $relativey = $relativey + $Height
   $CommandText.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $CommandText.Name = “CommandText”
   $Width = 620
   $Height = 100
   $CommandText.Size = New-Object System.Drawing.Size($Width,$Height)
   $CommandText.Multiline = $true
   $CommandText.ReadOnly = $true
   $CommandText.Text = “.\RWExport-To-HTML.ps1”

   $RunButton.TabIndex = $Tab
   $relativex = 165
   $relativey = $relativey + $Height + 10
   $RunButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $RunButton.Name = “RunButton”
   $Width = 320
   $Height = 25
   $RunButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $RunButton.Text = “Run Script”
   $RunButton.add_Click($handler_RunButton_Click)

   $SaveButton.TabIndex = $Tab
   $relativex = $relativex
   $relativey = $relativey + $Height + $ypadding
   $SaveButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $SaveButton.Name = “SaveButton”
   $Width = 100
   $Height = 25
   $SaveButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $SaveButton.Text = “Save Script”
   $SaveButton.add_Click($handler_SaveButton_Click)

   $LoadButton.TabIndex = $Tab
   $relativex = $relativex + $width + $xpadding
   $relativey = $relativey
   $LoadButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $LoadButton.Name = “LoadButton”
   $Width = 100
   $Height = 25
   $LoadButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $LoadButton.Text = “Load Script”
   $LoadButton.add_Click($handler_LoadButton_Click)

   $DefaultsButton.TabIndex = $Tab
   $relativex = $relativex + $width + $xpadding
   $relativey = $relativey
   $DefaultsButton.Location = New-Object System.Drawing.Size($relativex,$relativey)
   $DefaultsButton.Name = “DefaultsButton”
   $Width = 100
   $Height = 25
   $DefaultsButton.Size = New-Object System.Drawing.Size($Width,$Height)
   $DefaultsButton.Text = “Save Defaults”
   $DefaultsButton.add_Click($handler_DefaultsButton_Click)

   $RWExportForm.Controls.Add($ScriptButton)
   $RWExportForm.Controls.Add($ScriptText)
   $RWExportForm.Controls.Add($SourceButton)
   $RWExportForm.Controls.Add($SourceText)
   $RWExportForm.Controls.Add($DestinationButton)
   $RWExportForm.Controls.Add($DestinationText)
   $RWExportForm.Controls.Add($CSSButton)
   $RWExportForm.Controls.Add($CSSText)
   $RWExportForm.Controls.Add($LogCheck)
   $RWExportForm.Controls.Add($LogButton)
   $RWExportForm.Controls.Add($LogText)
   $RWExportForm.Controls.Add($SortLabel)
   $RWExportForm.Controls.Add($SortComboBox)
   $RWExportForm.Controls.Add($SimpleImgLabel)
   $RWExportForm.Controls.Add($SimpleImgText)
   $RWExportForm.Controls.Add($SmartImgLabel)
   $RWExportForm.Controls.Add($SmartImgText)
   $RWExportForm.Controls.Add($PrefixCheck)
   $RWExportForm.Controls.Add($PrefixLabel)
   $RWExportForm.Controls.Add($SuffixCheck)
   $RWExportForm.Controls.Add($SuffixLabel)
   $RWExportForm.Controls.Add($DetailsCheck)
   $RWExportForm.Controls.Add($DetailsLabel)
   $RWExportForm.Controls.Add($IndentCheck)
   $RWExportForm.Controls.Add($IndentLabel)
   $RWExportForm.Controls.Add($InlineStatsCheck)
   $RWExportForm.Controls.Add($InlineStatsLabel)
   $RWExportForm.Controls.Add($KeepStylesCheck)
   $RWExportForm.Controls.Add($KeepStylesLabel)
   $RWExportForm.Controls.Add($SeparateCheck)
   $RWExportForm.Controls.Add($SeparateLabel)
   $RWExportForm.Controls.Add($SplitTopicsCheck)
   $RWExportForm.Controls.Add($SplitTopicsLabel)
   $RWExportForm.Controls.Add($ExtractFilesCheck)
   $RWExportForm.Controls.Add($ExtractFilesLabel)
   $RWExportForm.Controls.Add($ForceCheck)
   $RWExportForm.Controls.Add($ForceLabel)

   $FormatGroup.Controls.Add($HTMLButton)
   $FormatGroup.Controls.Add($HTMLLabel)
   $FormatGroup.Controls.Add($WordButton)
   $FormatGroup.Controls.Add($WordLabel)
   $RWExportForm.Controls.Add($FormatGroup)

   $RWExportForm.Controls.Add($CommandLabel)
   $RWExportForm.Controls.Add($CommandText)
   $RWExportForm.Controls.Add($RunButton)
   $RWExportForm.Controls.Add($SaveButton)
   $RWExportForm.Controls.Add($LoadButton)
   $RWExportForm.Controls.Add($DefaultsButton)
   # endregion Generated Form Code

   # Save the initial state of the form
   $InitialFormWindowState = $RWExportForm.WindowState
   #Init the OnLoad event to correct the initial state of the form
   $RWExportForm.add_Load($OnLoadForm_StateCorrection)

   #Show the Form
   $RWExportForm.ShowDialog()| Out-Null
} #End Function

#Call the Function
GenerateForm 